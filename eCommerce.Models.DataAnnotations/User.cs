using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace eCommerce.Models
{
       /* 
        * _DataAnnotations.Schema:
        *
        *   *[Table]: name of Table
        *   *[Column]: name of Column
        *   *[NotMapped]: property not mapped
        *   *[ForeignKey]: property FK
        *   *[InverseProperty]: denote the inverse navigation property of a relationship
        *                       when the same type takes part in multiple relationships
        *   *[DatabaseGenerated]: generated values by database (or not)
        *
        * _DataAnnotations:
        *
        *   *[Key] = defines a PK
        *
        * _EF_Core:
        *   *[Index] = create an Index - EF Core (x - unique)
        */

       /*
        * DataAnnotation, FluentAPI:
        *   Code-First > Code --> Database 
        *   Database-First > Database --> Code (scaffold or manual)
        */
    
    //[Index("Email")] - nameof() is preferable (code maintence)
    [Index(nameof(Email), IsUnique = true, Name = "IX_EMAIL_UNIQUE")]
    [Index(nameof(Name), nameof(CPF))]
    [Table("TB_USERS")]
    public class User
    {
        // (Id or UserId) == PK - Identity (by EF Core)
        //[DatabaseGenerated(DatabaseGeneratedOption.None)] ==> not generated by database - it's possible to do: " new User() { Id = 100 } "
        public int Id { get; set; }

        // [Key]
        // [Column("COD")]
        // public int Code { get; set; }

        public string Name { get; set; } = null!;
        public string Email { get; set; } = null!;

        [Required]
        [MaxLength(15)]
        public string? Gender { get; set; }

        [Column("GENERAL_REGISTER")]
        public string? RG { get; set; }
        public string CPF { get; set; } = null!;
        public string? MotherName { get; set; }
        public string? RegisterSituation { get; set; }

        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int Registration { get; set; }

        /* ActivatedRegister = (RegisterSituation == Active) ? true : false;
         * Only used by software (no meaning to database purpose)
         */
        [NotMapped]
        public bool ActivatedRegister { get; set; }

        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        public DateTimeOffset RegisterDate { get; set; } // "GETDATE()"


        [ForeignKey("UserId")] // at Contacts UserId is ForeignKey
        public Contact? Contact { get; set; }
        public ICollection<DeliveryAddress>? DeliveryAddresses { get; set; }
        public ICollection<Department>? Departments { get; set; }

        //User.CustomerOrders[3].Id ..etc
        [InverseProperty("Customer")]
        public ICollection<Order>? CustomerOrders { get; set; }

        //User.EmployeeOrders[0].Id ..etc
        [InverseProperty("Employee")]
        public ICollection<Order>? EmployeeOrders { get; set; }

        //User.SupervisorOrders[4].Id ..etc
        [InverseProperty("Supervisor")]
        public ICollection<Order>? SupervisorOrders { get; set; }
    }
}